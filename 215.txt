# 2667번
def Graph(array):
    graph={}
    for i in range(N):
        for j in range(N):
            if array[i][j]:
                graph[(i,j)]=[]
    for (i,j) in graph.keys():
        # 상하좌우 이웃 확인
        if graph.get((i-1,j),-1)!=-1:
            graph[(i,j)].append((i-1,j))
        if graph.get((i+1,j),-1)!=-1:
            graph[(i,j)].append((i+1,j))
        if graph.get((i,j-1),-1)!=-1:
            graph[(i,j)].append((i,j-1))
        if graph.get((i,j+1),-1)!=-1:
            graph[(i,j)].append((i,j+1))
    return graph
 
def bfs(graph):
    # 첫번째
    Result =[]
    keys =  list(graph.keys())
    next_visit=[keys[0]] #queue 
    while True:
        visited = []
        # 시작을 1인 지점에서 시작
        while next_visit:
            next = next_visit.pop(0)
            if next not in visited:
                visited.append(next)
                next_visit.extend(graph[next])
        Result.append(visited)
        for i in visited:
            keys.remove(i)
        if keys:
            next_visit = [keys[0]]
        else:
            break
    return Result
def solution(array):
    graph = Graph(array)
    result = bfs(graph)
    result = list(map(len,result))
    return sorted(result)
# 원초적인 bfs
N = int(input())
array=[]
for i in range(N):
    array.append(list(map(int,' '.join(input()).split())))
answer=solution(array)
print(len(answer))
for i in answer:
    print(i)

# 14226 이모티콘(미완)
def dfs(S):
    visited=[]
    current = 1
    clip = 0
    time = 0
    next_visit=[(current,clip,time)]
    while next_visit:
        next = next_visit.pop()
        # 최대값도 정해주자
        # 하나하나 더하는 것이 가장 클 것으로 사료됨
        if next[-1]<S: # 아무것도 없다면 return S하면 됨.
            
            if next[0]==S:
                if next[-1] not in visited:
                    visited.append(next[-1])
            elif next[0]>S:
                continue
            else:
                # 3가지 방향이 가능
                # current에 clip 추가
                # 근데 current와 clip이 다를 때만 의미가 있음
                # 근데 visited에 next[-1]+1이 있다면 굳이 더할 필요가 없다!(최적화)
                if next[0]!=next[1]:
                    next_visit.append((next[0],next[0],next[-1]+1))
                # clip에 current 복사
                if next[1]:
                    next_visit.append((next[0]+next[1],next[1],next[-1]+1))
                # current 하나 제거
                if next[0]>1:
                    next_visit.append((next[0]-1,next[1],next[-1]+1))
    
    return visited+[S]
def solution(S):
    visited = dfs(S)
    return min(visited)
S = int(input())
print(solution(S))
# 2225 (미완)
def dfs(N,K):
    idx = list(range(N+1))
    visited=[]
    next_visited=[[_] for _ in idx]
    while next_visited:
        next = next_visited.pop()
        if sum(next)<=N:
            if len(next)==K:
                if sum(next)==N:
                    visited.append(next)
            else:
                for i in idx:
                    next_visited.append(next+[i])
    print(visited)
    return len(visited)%1000000000