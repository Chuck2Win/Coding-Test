# 7576 토마토 -> 최적화 필요 -> 시간초과
def Graph(A,M,N):
    gr = {}
    for i in range(N): # 행
        for j in range(M): # 열
            if A[i][j]==1:
                if gr.get(1):
                    gr[1].add((i,j))
                else:
                    gr[1]={(i,j)}
            elif A[i][j]==-1:
                
                if gr.get(-1):
                    gr[-1].add((i,j))    
                else:
                    gr[-1]={(i,j)}
            
    return gr
def check_in(coord):
    x,y = coord
    if (x>=0 and x<N) and (y>=0 and y<M):
        return True
    else:
        return False 

def check(graph,M,N):
    if M*N - len(graph.get(-1,set())) == len(graph.get(1)):
        return False
    else:
        return True

def is_available(current,graph):
    '''
    상하좌우 녀석들이 graph[0]에 있으면 된당.
    available1은 기존에 update된 녀석들도 다시 계산했는데, bfs를 적용하자
    '''
    # N 행
    # M 열
    # 상하좌우
    # 그 녀석들이
    # array 규격, -1인 경우 제외
    result = set()
    for coord in current: # N
        x,y = coord
        next_coord = [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]
        next_coord = [i for i in next_coord if check_in(i)]
        result=result.union(next_coord)
    graph[1]=graph[1].union(result)
    return result

def bfs(graph):
    visited=[]
    t = 0
    candi = graph[1]
    while check(graph,M,N): # 다 안 있으면 True
        candi = is_available(candi,graph)
        if candi:
            t+=1
        # 아직 다 익지 않았는데 갈 곳 이 없으면 return -1
        else:
            return -1
    return t

def solution(M,N,A):
    graph = Graph(A,M,N)
    # 1이 하나도 없으면 -1
    if graph.get(1) is None:
        print('this?')
        return -1
    
    else:
        # -1을 제외한 나머지가 싹 다 1이면 0
        if M*N - len(graph.get(-1,set())) == len(graph.get(1)):
            return 0
        else:
            return bfs(graph)
M,N = map(int,input().split())
A = []
for i in range(N):
    x=list(map(int,input().split()))
    A.append(x)
print(solution(M,N,A))

# 10879 차이를 최대로
N = int(input())
A = list(map(int,input().split()))

def score(N,A,IDX):
    A = [A[i] for i in IDX]
    return sum([abs(A[i]-A[i+1]) for i in range(N-1)])    

def dfs(N,A):
    idx = [i for i in range(N)]
    next_visit=[[i] for i in idx]
    max_value = -float('inf')
    while next_visit:
        next = next_visit.pop()
        if len(next)==N:
            if max_value<score(N,A,next):
                max_value = score(N,A,next)
        else:
            for i in idx:
                if i not in next:
                    next_visit.append(next+[i])
    return max_value            

print(dfs(N,A))