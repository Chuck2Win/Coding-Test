# MaxCounters
import heapq
def solution(N, A): # 시간복잡도 O(MN)
    counter = [0 for _ in range(N)]
    max_counter = 0

    for step in range(len(A)): # M->O(MlogM)
        if A[step]==N+1: 
            max_value = heapq.heappop(max_counter)[1] # 1
            counter = [max_value for _ in range(N)]
            heapq.heappush(max_counter,(-max_value,max_value)) #logM
        else:
            counter[A[step]-1]+=1
            
heapq.heappush(max_counter,(-counter[A[step]-1],counter[A[step]-1])) #logM
            # heap을 넣으면 ma
    return counter
    # O(N), O(NlogN)
    # write your code in Python 3.6

# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

def solution(N, A):
    # write your code in Python 3.6
    counter = [0]*N
    max_value = 0
    for i in range(len(A)):#M
        if A[i]==(N+1):
            counter =[max_value]*N #복사는 이게 더 빠르다
        else:
            counter[A[i]-1]+=1
            max_value = max(max_value,counter[A[i]-1])
    return counter

def solution(N, A):
    # write your code in Python 3.6
    counter = [0]*N
    max_value = 0
    for i in range(len(A)):# max()->O(N)
    # 죄다 N+1보다 클 때. - 이전 것- 과 비교하면 될 듯
        #print(counter)
        if A[i]==(N+1):
            if i==0:
                counter = [max_value]*N
            else:
                if A[i-1]==(N+1):
                    continue
                else:
                    counter = [max_value]*N
        else:
            counter[A[i]-1]+=1
            max_value = max(max_value,counter[A[i]-1])
    return counter
